name: On Push
on:
  push:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  CARGO_TERM_COLOR: always
  NAME: pura
  DOCKER_IMAGE: rogueoneecho/pura
jobs:

  release:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - id: release
      env:
        GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: ${{ secrets.RELEASE_SCRIPT }}

    - run: echo "# ${{ steps.release.outputs.version}}" >> $GITHUB_STEP_SUMMARY

    - run: cat /tmp/release-notes.md >> $GITHUB_STEP_SUMMARY

    - uses: actions/upload-artifact@v4
      with:
        name: release-notes.md
        path: /tmp/release-notes.md

    - run: /home/linuxbrew/.linuxbrew/bin/brew install cargo-edit
      if: steps.release.outputs.version != ''

    - run: /home/linuxbrew/.linuxbrew/bin/cargo-set-version set-version ${{ steps.release.outputs.version }}
      if: steps.release.outputs.version != ''

    - run: git --no-pager diff --color

    - uses: actions/upload-artifact@v4
      with:
        name: Cargo.toml
        path: Cargo.toml


  cargo-build:
    runs-on: ${{ matrix.os }}
    needs:
    - release
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-24.04
          target: x86_64-unknown-linux-gnu
          test: true
        - os: ubuntu-24.04
          target: x86_64-unknown-linux-musl
        - os: macos-13
          target: x86_64-apple-darwin
          test: true
        - os: macos-14
          target: aarch64-apple-darwin
          test: true

    steps:

    - uses: actions/checkout@v4

    - name: Restore cargo cache
      id: cache-cargo
      uses: actions/cache/restore@v4
      with:
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/

    - uses: actions/download-artifact@v4
      with:
        name: Cargo.toml

    - run: git --no-pager diff --color

    - if: contains(matrix.os, 'ubuntu')
      run: sudo apt-get update

    - if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
      run: sudo apt-get install musl-tools libssl-dev pkg-config --yes

    - if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross --yes

    - if: matrix.target == 'aarch64-unknown-linux-musl'
      run: sudo apt-get install musl-tools gcc-aarch64-linux-gnu musl-dev --yes

    - run: rustup target add ${{ matrix.target }}

    - run: cargo build --release --target ${{ matrix.target }}

    - name: Save cargo cache
      id: cargo-cache-save
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.cache-cargo.outputs.cache-primary-key }}
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/

    - run: mkdir artifacts

    - run: >
        cp target/${{ matrix.target }}/release/${{ env.NAME }}
        artifacts/${{ env.NAME }}-${{ needs.release.outputs.version }}-${{ matrix.target }}

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.NAME }}-${{ needs.release.outputs.version }}-${{ matrix.target }}
        path: artifacts/${{ env.NAME }}-${{ needs.release.outputs.version }}-${{ matrix.target }}

    - run: rm -rf artifacts

    - if: matrix.test
      run: |
        tee config.yml <<EOF
        name: PODCAST NAME
        url: ${{ secrets.TEST_URL }}
        cache_dir: ''
        EOF

    - if: matrix.test
      run: mkdir -p cache/client

    - if: matrix.test
      run: cargo test --release --no-fail-fast --target ${{ matrix.target }}

    - name: Run cargo check
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        if ! cargo check --quiet --all-targets --message-format short
        then
          echo "::warning title=Cargo Check Failed::Please review the output for details."
        fi

    - name: Run cargo clippy
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        if ! cargo clippy --quiet --all-targets --message-format short
        then
          echo "::warning title=Clippy Check Failed::Please review the output for details."
        fi

    - name: Run cargo fmt
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        if ! cargo fmt --check
        then
          echo "::warning title=Format Check Failed::Please review the output for details."
        fi

    - run: git --no-pager diff --color


  cargo-publish:
    runs-on: ubuntu-24.04
    if: needs.release.outputs.version != '' && contains(needs.release.outputs.version, '-') == false
    needs:
    - release
    - cargo-build
    steps:

    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: Cargo.toml

    - run: git --no-pager diff --color

    - run: cargo publish --allow-dirty --no-verify
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}


  git-tag:
    runs-on: ubuntu-24.04
    if: needs.release.outputs.version != '' && contains(needs.release.outputs.version, '-')
    needs:
    - release
    - cargo-build
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - uses: actions/download-artifact@v4
      with:
        name: release-notes.md

    - name: git config
      run: ${{ secrets.GIT_CONFIG }}

    - name: git tag
      run: git tag "v${{ needs.release.outputs.version }}"

    - name: git push
      run: git push origin "v${{ needs.release.outputs.version }}"


  github-release:
    runs-on: ubuntu-24.04
    if: needs.release.outputs.version != '' && contains(needs.release.outputs.version, '-') == false
    needs:
    - release
    - cargo-build
    steps:

    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: release-notes.md

    - name: gh release create
      if: contains(needs.release.outputs.version, '-') == false
      env:
        GH_TOKEN: ${{ github.token }}
      run: >
        gh release create
        "v${{ needs.release.outputs.version }}"
        --title "v${{ needs.release.outputs.version }}"
        --notes-file release-notes.md
        --target ${{ github.ref_name }}

    - name: gh release create --prerelease
      if: contains(needs.release.outputs.version, '-')
      env:
        GH_TOKEN: ${{ github.token }}
      run: >
        gh release create
        "v${{ needs.release.outputs.version }}"
        --title "v${{ needs.release.outputs.version }}"
        --notes-file release-notes.md
        --target ${{ github.ref_name }}
        --prerelease

    - uses: actions/download-artifact@v4
      with:
        pattern: ${{ env.NAME }}-${{ needs.release.outputs.version }}-*
        merge-multiple: true

    - name: gh release upload
      run: >
        gh release upload
        "v${{ needs.release.outputs.version }}"
        "${{ env.NAME }}-${{ needs.release.outputs.version }}-"*
        --clobber
        --repo "${{ github.repository }}"
      env:
        GH_TOKEN: ${{ github.token }}

  docker-build:
    runs-on: ubuntu-24.04
    if: needs.release.outputs.version != ''
    needs:
    - release
    steps:

    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: buildx-${{ github.sha }}
        restore-keys: |
          buildx-

    - run: echo $GH_TOKEN | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - run: docker buildx create --use

    - run: >
        docker buildx build .
        --build-arg VERSION=${{ needs.release.outputs.version }}
        --tag ghcr.io/${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}
        --cache-from=type=local,src=/tmp/.buildx-cache
        --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max
        --push

    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - run: rm -rf /tmp/.buildx-cache
    - run: mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  docker-release:
    runs-on: ubuntu-24.04
    needs:
    - release
    - cargo-build
    - docker-build
    steps:

    - run: echo $GH_TOKEN | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - run: docker pull ghcr.io/${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }}

    - run: docker tag ghcr.io/${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }} ghcr.io/${{ env.DOCKER_IMAGE }}:alpha
      if: github.ref_name == 'main'

    - run: docker push ghcr.io/${{ env.DOCKER_IMAGE }}:alpha
      if: github.ref_name == 'main'

    - run: docker tag ghcr.io/${{ env.DOCKER_IMAGE }}:${{ needs.release.outputs.version }} ghcr.io/${{ env.DOCKER_IMAGE }}:latest
      if: contains(needs.release.outputs.version, '-') == false

    - run: docker push ghcr.io/${{ env.DOCKER_IMAGE }}:latest
      if: contains(needs.release.outputs.version, '-') == false
